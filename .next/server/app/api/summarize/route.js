/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/summarize/route";
exports.ids = ["app/api/summarize/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "vm":
/*!*********************!*\
  !*** external "vm" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("vm");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsummarize%2Froute&page=%2Fapi%2Fsummarize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsummarize%2Froute.ts&appDir=C%3A%5CUsers%5Caggym%5COneDrive%5CDesktop%5Cprojects%5Cyoutube_summarizer%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Caggym%5COneDrive%5CDesktop%5Cprojects%5Cyoutube_summarizer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsummarize%2Froute&page=%2Fapi%2Fsummarize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsummarize%2Froute.ts&appDir=C%3A%5CUsers%5Caggym%5COneDrive%5CDesktop%5Cprojects%5Cyoutube_summarizer%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Caggym%5COneDrive%5CDesktop%5Cprojects%5Cyoutube_summarizer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_aggym_OneDrive_Desktop_projects_youtube_summarizer_app_api_summarize_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/summarize/route.ts */ \"(rsc)/./app/api/summarize/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/summarize/route\",\n        pathname: \"/api/summarize\",\n        filename: \"route\",\n        bundlePath: \"app/api/summarize/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\aggym\\\\OneDrive\\\\Desktop\\\\projects\\\\youtube_summarizer\\\\app\\\\api\\\\summarize\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_aggym_OneDrive_Desktop_projects_youtube_summarizer_app_api_summarize_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZzdW1tYXJpemUlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnN1bW1hcml6ZSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnN1bW1hcml6ZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNhZ2d5bSU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q3Byb2plY3RzJTVDeW91dHViZV9zdW1tYXJpemVyJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNhZ2d5bSU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q3Byb2plY3RzJTVDeW91dHViZV9zdW1tYXJpemVyJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNnRDtBQUM3SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcYWdneW1cXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxwcm9qZWN0c1xcXFx5b3V0dWJlX3N1bW1hcml6ZXJcXFxcYXBwXFxcXGFwaVxcXFxzdW1tYXJpemVcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3N1bW1hcml6ZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3N1bW1hcml6ZVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvc3VtbWFyaXplL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcYWdneW1cXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxwcm9qZWN0c1xcXFx5b3V0dWJlX3N1bW1hcml6ZXJcXFxcYXBwXFxcXGFwaVxcXFxzdW1tYXJpemVcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsummarize%2Froute&page=%2Fapi%2Fsummarize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsummarize%2Froute.ts&appDir=C%3A%5CUsers%5Caggym%5COneDrive%5CDesktop%5Cprojects%5Cyoutube_summarizer%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Caggym%5COneDrive%5CDesktop%5Cprojects%5Cyoutube_summarizer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./app/api/summarize/route.ts":
/*!************************************!*\
  !*** ./app/api/summarize/route.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var youtube_transcript__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! youtube-transcript */ \"(rsc)/./node_modules/youtube-transcript/dist/youtube-transcript.esm.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./lib/prisma.ts\");\n/* harmony import */ var _lib_youtube__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/youtube */ \"(rsc)/./lib/youtube.ts\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var groq_sdk__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! groq-sdk */ \"(rsc)/./node_modules/groq-sdk/index.mjs\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var ytdl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ytdl-core */ \"(rsc)/./node_modules/ytdl-core/lib/index.js\");\n/* harmony import */ var ytdl_core__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(ytdl_core__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\n\n\nconst execAsync = (0,util__WEBPACK_IMPORTED_MODULE_9__.promisify)(child_process__WEBPACK_IMPORTED_MODULE_8__.exec);\n// Add at the top of the file after imports\nconst logger = {\n    info: (message, data)=>{\n        console.log(`[INFO] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    },\n    error: (message, error)=>{\n        console.error(`[ERROR] ${message}`, {\n            message: error?.message,\n            status: error?.status,\n            stack: error?.stack,\n            cause: error?.cause,\n            details: error?.details,\n            response: error?.response\n        });\n    },\n    debug: (message, data)=>{\n        console.debug(`[DEBUG] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// Initialize API clients only when needed\nfunction getGeminiClient() {\n    const apiKey = process.env.GEMINI_API_KEY;\n    if (!apiKey) return null;\n    const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_4__.GoogleGenerativeAI(apiKey);\n    return genAI;\n}\nfunction getGroqClient() {\n    const apiKey = process.env.GROQ_API_KEY;\n    if (!apiKey) return null;\n    return new groq_sdk__WEBPACK_IMPORTED_MODULE_10__.Groq({\n        apiKey\n    });\n}\nfunction getOpenAIClient() {\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) return null;\n    return new openai__WEBPACK_IMPORTED_MODULE_11__[\"default\"]({\n        apiKey\n    });\n}\n// Helper function to get user-friendly model names\nconst MODEL_NAMES = {\n    gemini: \"Google Gemini\",\n    groq: \"Groq\",\n    gpt4: \"GPT-4\"\n};\n// Helper function to check API key availability\nfunction checkApiKeyAvailability() {\n    return {\n        gemini: !!process.env.GEMINI_API_KEY,\n        groq: !!process.env.GROQ_API_KEY,\n        gpt4: !!process.env.OPENAI_API_KEY\n    };\n}\n// Helper function to clean model outputs\nfunction cleanModelOutput(text) {\n    return text// English prefixes\n    .replace(/^(Okay|Here'?s?( is)?|Let me|I will|I'll|I can|I would|I am going to|Allow me to|Sure|Of course|Certainly|Alright)[^]*?,\\s*/i, '').replace(/^(Here'?s?( is)?|I'?ll?|Let me|I will|I can|I would|I am going to|Allow me to|Sure|Of course|Certainly)[^]*?(summary|translate|breakdown|analysis).*?:\\s*/i, '').replace(/^(Based on|According to).*?,\\s*/i, '').replace(/^I understand.*?[.!]\\s*/i, '').replace(/^(Now|First|Let's),?\\s*/i, '').replace(/^(Here are|The following is|This is|Below is).*?:\\s*/i, '').replace(/^(I'll provide|Let me break|I'll break|I'll help|I've structured).*?:\\s*/i, '').replace(/^(As requested|Following your|In response to).*?:\\s*/i, '')// German prefixes\n    .replace(/^(Okay|Hier( ist)?|Lass mich|Ich werde|Ich kann|Ich würde|Ich möchte|Erlauben Sie mir|Sicher|Natürlich|Gewiss|In Ordnung)[^]*?,\\s*/i, '').replace(/^(Hier( ist)?|Ich werde|Lass mich|Ich kann|Ich würde|Ich möchte)[^]*?(Zusammenfassung|Übersetzung|Analyse).*?:\\s*/i, '').replace(/^(Basierend auf|Laut|Gemäß).*?,\\s*/i, '').replace(/^Ich verstehe.*?[.!]\\s*/i, '').replace(/^(Jetzt|Zunächst|Lass uns),?\\s*/i, '').replace(/^(Hier sind|Folgendes|Dies ist|Im Folgenden).*?:\\s*/i, '').replace(/^(Ich werde|Lass mich|Ich helfe|Ich habe strukturiert).*?:\\s*/i, '').replace(/^(Wie gewünscht|Entsprechend Ihrer|Als Antwort auf).*?:\\s*/i, '')// Remove meta instructions while preserving markdown\n    .replace(/^[^:\\n🎯🎙️#*\\-•]+:\\s*/gm, '') // Remove prefixes but keep markdown and emojis\n    .replace(/^(?![#*\\-•🎯️])[\\s\\d]+\\.\\s*/gm, '') // Remove numbered lists but keep markdown lists\n    .trim();\n}\n// AI Model configuration\nconst AI_MODELS = {\n    gemini: {\n        name: \"gemini\",\n        async generateContent (prompt) {\n            const genAI = getGeminiClient();\n            if (!genAI) {\n                throw new Error(`${MODEL_NAMES.gemini} API key is not configured. Please add your API key in the settings or choose a different model.`);\n            }\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-2.0-flash-001\"\n            });\n            const result = await model.generateContent(prompt);\n            const response = await result.response;\n            return cleanModelOutput(response.text());\n        }\n    }\n};\nasync function splitTranscriptIntoChunks(transcript, chunkSize = 7000, overlap = 1000) {\n    const words = transcript.split(' ');\n    const chunks = [];\n    let currentChunk = [];\n    let currentLength = 0;\n    for (const word of words){\n        if (currentLength + word.length > chunkSize && currentChunk.length > 0) {\n            chunks.push(currentChunk.join(' '));\n            // Keep last few words for overlap\n            const overlapWords = currentChunk.slice(-Math.floor(overlap / 10));\n            currentChunk = [\n                ...overlapWords\n            ];\n            currentLength = overlapWords.join(' ').length;\n        }\n        currentChunk.push(word);\n        currentLength += word.length + 1; // +1 for space\n    }\n    if (currentChunk.length > 0) {\n        chunks.push(currentChunk.join(' '));\n    }\n    return chunks;\n}\nasync function downloadAudio(videoId) {\n    const tempPath = path__WEBPACK_IMPORTED_MODULE_7___default().join('/tmp', `${videoId}_temp.mp3`);\n    const outputPath = path__WEBPACK_IMPORTED_MODULE_7___default().join('/tmp', `${videoId}.flac`);\n    try {\n        logger.info(`Starting audio download for video ${videoId}`);\n        // First download the audio\n        await new Promise((resolve, reject)=>{\n            const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;\n            logger.debug(`Downloading from URL: ${videoUrl}`);\n            // Get video info first\n            ytdl_core__WEBPACK_IMPORTED_MODULE_5___default().getInfo(videoUrl).then((info)=>{\n                logger.info('Video info retrieved:', {\n                    title: info.videoDetails.title,\n                    duration: info.videoDetails.lengthSeconds\n                });\n                // Select the best audio format\n                const audioFormats = ytdl_core__WEBPACK_IMPORTED_MODULE_5___default().filterFormats(info.formats, 'audioonly');\n                const format = audioFormats.sort((a, b)=>{\n                    // Prefer opus/webm formats\n                    if (a.codecs?.includes('opus') && !b.codecs?.includes('opus')) return -1;\n                    if (!a.codecs?.includes('opus') && b.codecs?.includes('opus')) return 1;\n                    // Then sort by audio quality (bitrate)\n                    return (b.audioBitrate || 0) - (a.audioBitrate || 0);\n                })[0];\n                if (!format) {\n                    reject(new Error('No suitable audio format found'));\n                    return;\n                }\n                logger.info('Selected audio format:', {\n                    container: format.container,\n                    codec: format.codecs,\n                    quality: format.quality,\n                    bitrate: format.audioBitrate\n                });\n                const stream = ytdl_core__WEBPACK_IMPORTED_MODULE_5___default().downloadFromInfo(info, {\n                    format\n                });\n                stream.on('error', (error)=>{\n                    logger.error('Error in ytdl stream:', {\n                        error: error.message,\n                        stack: error.stack,\n                        videoId\n                    });\n                    reject(error);\n                });\n                const writeStream = fs__WEBPACK_IMPORTED_MODULE_6___default().createWriteStream(tempPath);\n                writeStream.on('error', (error)=>{\n                    logger.error('Error in write stream:', {\n                        error: error.message,\n                        path: tempPath\n                    });\n                    reject(error);\n                });\n                stream.pipe(writeStream).on('finish', ()=>{\n                    const stats = fs__WEBPACK_IMPORTED_MODULE_6___default().statSync(tempPath);\n                    logger.info(`Audio download completed: ${tempPath}`, {\n                        fileSize: stats.size\n                    });\n                    resolve();\n                }).on('error', (error)=>{\n                    logger.error('Error during audio download:', {\n                        error: error.message,\n                        stack: error.stack\n                    });\n                    reject(error);\n                });\n            }).catch((error)=>{\n                logger.error('Failed to get video info:', {\n                    error: error.message,\n                    stack: error.stack,\n                    videoId\n                });\n                reject(error);\n            });\n        });\n        // Verify the temp file exists and has content\n        const tempStats = fs__WEBPACK_IMPORTED_MODULE_6___default().statSync(tempPath);\n        if (tempStats.size === 0) {\n            throw new Error('Downloaded audio file is empty');\n        }\n        logger.info('Temp file verification:', {\n            size: tempStats.size,\n            path: tempPath\n        });\n        // Convert to optimal format for Whisper\n        logger.info('Converting audio to FLAC format...');\n        try {\n            const { stdout, stderr } = await execAsync(`ffmpeg -i ${tempPath} -ar 16000 -ac 1 -c:a flac ${outputPath}`);\n            logger.debug('FFmpeg output:', {\n                stdout,\n                stderr\n            });\n        } catch (error) {\n            logger.error('FFmpeg conversion failed:', {\n                error: error.message,\n                stdout: error.stdout,\n                stderr: error.stderr\n            });\n            throw error;\n        }\n        // Verify the output file\n        const stats = fs__WEBPACK_IMPORTED_MODULE_6___default().statSync(outputPath);\n        if (stats.size === 0) {\n            throw new Error('Converted FLAC file is empty');\n        }\n        logger.info('Audio conversion completed successfully:', {\n            inputSize: tempStats.size,\n            outputSize: stats.size,\n            outputPath\n        });\n        // Clean up temp file\n        fs__WEBPACK_IMPORTED_MODULE_6___default().unlinkSync(tempPath);\n        logger.info('Temporary MP3 file cleaned up');\n        return outputPath;\n    } catch (error) {\n        logger.error('Error in downloadAudio:', {\n            error: error instanceof Error ? {\n                message: error.message,\n                stack: error.stack\n            } : error,\n            videoId,\n            tempPath,\n            outputPath\n        });\n        // Clean up any files in case of error\n        if (fs__WEBPACK_IMPORTED_MODULE_6___default().existsSync(tempPath)) {\n            try {\n                fs__WEBPACK_IMPORTED_MODULE_6___default().unlinkSync(tempPath);\n                logger.info('Cleaned up temp MP3 file after error');\n            } catch (cleanupError) {\n                logger.error('Failed to cleanup temp MP3 file:', cleanupError);\n            }\n        }\n        if (fs__WEBPACK_IMPORTED_MODULE_6___default().existsSync(outputPath)) {\n            try {\n                fs__WEBPACK_IMPORTED_MODULE_6___default().unlinkSync(outputPath);\n                logger.info('Cleaned up FLAC file after error');\n            } catch (cleanupError) {\n                logger.error('Failed to cleanup FLAC file:', cleanupError);\n            }\n        }\n        throw error;\n    }\n}\nasync function transcribeWithWhisper(audioPath) {\n    try {\n        logger.info('Starting transcription process with OpenAI Whisper');\n        // Verify input file\n        const inputStats = fs__WEBPACK_IMPORTED_MODULE_6___default().statSync(audioPath);\n        logger.debug('Input file details:', {\n            size: inputStats.size,\n            path: audioPath\n        });\n        const openai = getOpenAIClient();\n        if (!openai) {\n            throw new Error('OpenAI API key not configured for Whisper transcription.');\n        }\n        // Read file as buffer\n        const audioBuffer = await fs__WEBPACK_IMPORTED_MODULE_6___default().promises.readFile(audioPath);\n        logger.info(`Read audio file of size: ${audioBuffer.length} bytes`);\n        try {\n            logger.info('Sending request to OpenAI Whisper API...');\n            const transcription = await openai.audio.transcriptions.create({\n                file: new File([\n                    audioBuffer\n                ], 'audio.flac', {\n                    type: 'audio/flac'\n                }),\n                model: 'whisper-1',\n                language: 'auto'\n            });\n            logger.info('Successfully received transcription from Whisper');\n            return transcription.text;\n        } catch (error) {\n            logger.error('Transcription request failed:', error);\n            throw new Error(`Whisper transcription failed: ${error.message || 'Unknown error'}`);\n        }\n    } finally{\n        // Cleanup: Delete the temporary audio file\n        try {\n            await fs__WEBPACK_IMPORTED_MODULE_6___default().promises.unlink(audioPath);\n            logger.info('Cleaned up temporary audio file');\n        } catch (error) {\n            logger.error('Failed to delete temporary audio file:', error);\n        }\n    }\n}\nasync function getTranscript(videoId) {\n    try {\n        logger.info(`Attempting to fetch YouTube transcript for video ${videoId}`);\n        // First try YouTube transcripts\n        const transcriptList = await youtube_transcript__WEBPACK_IMPORTED_MODULE_1__.YoutubeTranscript.fetchTranscript(videoId);\n        // Extract title and process transcript as before\n        const firstFewLines = transcriptList.slice(0, 5).map((item)=>item.text).join(' ');\n        let title = firstFewLines.split('.')[0].trim();\n        if (title.length > 100) {\n            title = title.substring(0, 97) + '...';\n        }\n        if (title.length < 10) {\n            title = `YouTube Video Summary`;\n        }\n        logger.info('Successfully retrieved YouTube transcript');\n        logger.debug('Transcript details:', {\n            title,\n            length: transcriptList.length,\n            firstLine: transcriptList[0]?.text\n        });\n        return {\n            transcript: transcriptList.map((item)=>item.text).join(' '),\n            source: 'youtube',\n            title\n        };\n    } catch (error) {\n        logger.info('YouTube transcript not available, falling back to Whisper...', {\n            error: error instanceof Error ? error.message : String(error)\n        });\n        try {\n            // Get video info for title\n            logger.info('Fetching video info from YouTube');\n            const videoInfo = await ytdl_core__WEBPACK_IMPORTED_MODULE_5___default().getInfo(videoId).catch((infoError)=>{\n                logger.error('Failed to get video info:', {\n                    error: infoError instanceof Error ? {\n                        message: infoError.message,\n                        stack: infoError.stack\n                    } : infoError,\n                    videoId\n                });\n                throw infoError;\n            });\n            const title = videoInfo.videoDetails.title;\n            logger.info('Video info retrieved successfully:', {\n                title,\n                duration: videoInfo.videoDetails.lengthSeconds,\n                author: videoInfo.videoDetails.author.name\n            });\n            // Check if OpenAI API is available\n            const openai = getOpenAIClient();\n            if (!openai) {\n                const error = 'Transcript not available and OpenAI API key not configured for Whisper fallback.';\n                logger.error(error, {\n                    message: error\n                });\n                throw new Error(error);\n            }\n            // Download and transcribe\n            try {\n                const audioPath = await downloadAudio(videoId);\n                logger.info('Audio downloaded successfully', {\n                    path: audioPath,\n                    fileStats: fs__WEBPACK_IMPORTED_MODULE_6___default().statSync(audioPath)\n                });\n                const transcript = await transcribeWithWhisper(audioPath);\n                logger.info('Transcription completed successfully', {\n                    transcriptLength: transcript.length\n                });\n                return {\n                    transcript,\n                    source: 'whisper',\n                    title\n                };\n            } catch (processingError) {\n                logger.error('Processing error:', {\n                    phase: typeof processingError === 'object' && processingError !== null && 'phase' in processingError ? processingError.phase : 'unknown',\n                    error: processingError instanceof Error ? {\n                        message: processingError.message,\n                        stack: processingError.stack\n                    } : String(processingError)\n                });\n                throw processingError;\n            }\n        } catch (error) {\n            logger.error('Failed to get transcript:', {\n                error: error instanceof Error ? {\n                    message: error.message,\n                    stack: error.stack\n                } : error,\n                videoId\n            });\n            throw new Error(`Failed to process video: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n}\n// Add new endpoint to check API key availability\nasync function GET(req) {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(checkApiKeyAvailability());\n}\nasync function POST(req) {\n    const encoder = new TextEncoder();\n    const stream = new TransformStream();\n    const writer = stream.writable.getWriter();\n    const writeProgress = async (data)=>{\n        await writer.write(encoder.encode(JSON.stringify(data) + '\\n'));\n    };\n    (async ()=>{\n        try {\n            const { url, language, mode, aiModel = 'gemini' } = await req.json();\n            const videoId = (0,_lib_youtube__WEBPACK_IMPORTED_MODULE_3__.extractVideoId)(url);\n            logger.info('Processing video request', {\n                videoId,\n                language,\n                mode,\n                aiModel\n            });\n            if (!AI_MODELS[aiModel]) {\n                throw new Error(`Invalid AI model selected. Please choose from: ${Object.values(MODEL_NAMES).join(', ')}`);\n            }\n            const selectedModel = AI_MODELS[aiModel];\n            logger.info(`Using ${MODEL_NAMES[aiModel]} model for generation...`);\n            // Check cache first\n            const existingSummary = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.summary.findFirst({\n                where: {\n                    videoId,\n                    language\n                }\n            });\n            if (existingSummary) {\n                await writeProgress({\n                    type: 'complete',\n                    summary: existingSummary.content,\n                    source: 'cache',\n                    status: 'completed'\n                });\n                await writer.close();\n                return;\n            }\n            // Get transcript\n            await writeProgress({\n                type: 'progress',\n                currentChunk: 0,\n                totalChunks: 1,\n                stage: 'analyzing',\n                message: 'Fetching video transcript...'\n            });\n            const { transcript, source, title } = await getTranscript(videoId);\n            const chunks = await splitTranscriptIntoChunks(transcript);\n            const totalChunks = chunks.length;\n            const intermediateSummaries = [];\n            // Process chunks\n            for(let i = 0; i < chunks.length; i++){\n                await writeProgress({\n                    type: 'progress',\n                    currentChunk: i + 1,\n                    totalChunks,\n                    stage: 'processing',\n                    message: `Processing section ${i + 1} of ${totalChunks}...`\n                });\n                const prompt = `Create a detailed summary of section ${i + 1} in ${language}.\n        Maintain all important information, arguments, and connections.\n        Pay special attention to:\n        - Main topics and arguments\n        - Important details and examples\n        - Connections with other mentioned topics\n        - Key statements and conclusions\n\n        Text: ${chunks[i]}`;\n                const text = await selectedModel.generateContent(prompt);\n                intermediateSummaries.push(text);\n            }\n            // Generate final summary\n            await writeProgress({\n                type: 'progress',\n                currentChunk: totalChunks,\n                totalChunks,\n                stage: 'finalizing',\n                message: 'Creating final summary...'\n            });\n            const combinedSummary = intermediateSummaries.join('\\n\\n=== Next Section ===\\n\\n');\n            const finalPrompt = (0,_lib_youtube__WEBPACK_IMPORTED_MODULE_3__.createSummaryPrompt)(combinedSummary, language, mode);\n            const summary = await selectedModel.generateContent(finalPrompt);\n            if (!summary) {\n                throw new Error('No summary content generated');\n            }\n            // Save to database\n            await writeProgress({\n                type: 'progress',\n                currentChunk: totalChunks,\n                totalChunks,\n                stage: 'saving',\n                message: 'Saving summary to history...'\n            });\n            try {\n                // Check if summary already exists\n                const existingSummary = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.summary.findFirst({\n                    where: {\n                        videoId,\n                        language\n                    }\n                });\n                let savedSummary;\n                if (existingSummary) {\n                    // Update existing summary\n                    savedSummary = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.summary.update({\n                        where: {\n                            id: existingSummary.id\n                        },\n                        data: {\n                            content: summary,\n                            mode,\n                            source,\n                            updatedAt: new Date()\n                        }\n                    });\n                } else {\n                    // Create new summary\n                    savedSummary = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.summary.create({\n                        data: {\n                            videoId,\n                            title,\n                            content: summary,\n                            language,\n                            mode,\n                            source\n                        }\n                    });\n                }\n                await writeProgress({\n                    type: 'complete',\n                    summary: savedSummary.content,\n                    source: savedSummary.source || 'youtube',\n                    status: 'completed'\n                });\n            } catch (dbError) {\n                console.warn('Warning: Failed to save to database -', dbError?.message || 'Unknown database error');\n                // Still return the summary even if saving failed\n                await writeProgress({\n                    type: 'complete',\n                    summary,\n                    source: source || 'youtube',\n                    status: 'completed',\n                    warning: 'Failed to save to history'\n                });\n            }\n        } catch (error) {\n            logger.error('Error processing video:', {\n                error,\n                stack: error?.stack,\n                cause: error?.cause\n            });\n            await writeProgress({\n                type: 'error',\n                error: error?.message || 'Failed to process video',\n                details: error?.toString() || 'Unknown error'\n            }).catch((writeError)=>{\n                logger.error('Failed to write error progress:', writeError);\n            });\n        } finally{\n            await writer.close().catch((closeError)=>{\n                logger.error('Failed to close writer:', closeError);\n            });\n        }\n    })();\n    return new Response(stream.readable, {\n        headers: {\n            'Content-Type': 'text/event-stream',\n            'Cache-Control': 'no-cache',\n            'Connection': 'keep-alive'\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/summarize/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) {\n    globalForPrisma.prisma = prisma;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUU5QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFHO0FBRW5FLElBQUlJLElBQXFDLEVBQUU7SUFDekNILGdCQUFnQkUsTUFBTSxHQUFHQTtBQUMzQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxhZ2d5bVxcT25lRHJpdmVcXERlc2t0b3BcXHByb2plY3RzXFx5b3V0dWJlX3N1bW1hcml6ZXJcXGxpYlxccHJpc21hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcclxuXHJcbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XHJcbiAgcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KCk7XHJcblxyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7XHJcbn0iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsInByb2Nlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/prisma.ts\n");

/***/ }),

/***/ "(rsc)/./lib/youtube.ts":
/*!************************!*\
  !*** ./lib/youtube.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AVAILABLE_LANGUAGES: () => (/* binding */ AVAILABLE_LANGUAGES),\n/* harmony export */   createSummaryPrompt: () => (/* binding */ createSummaryPrompt),\n/* harmony export */   extractVideoId: () => (/* binding */ extractVideoId)\n/* harmony export */ });\nfunction extractVideoId(youtube_url) {\n    const patterns = [\n        /(?:v=|\\/)([0-9A-Za-z_-]{11}).*/,\n        /(?:embed\\/)([0-9A-Za-z_-]{11})/,\n        /(?:youtu\\.be\\/)([0-9A-Za-z_-]{11})/,\n        /(?:shorts\\/)([0-9A-Za-z_-]{11})/,\n        /^([0-9A-Za-z_-]{11})$/ // Just the video ID\n    ];\n    const url = youtube_url.trim();\n    for (const pattern of patterns){\n        const match = url.match(pattern);\n        if (match) {\n            return match[1];\n        }\n    }\n    throw new Error(\"Could not extract video ID from URL\");\n}\nconst AVAILABLE_LANGUAGES = {\n    'English': 'en'\n};\nfunction createSummaryPrompt(text, targetLanguage, mode = 'video') {\n    const languagePrompts = {\n        'en': {\n            title: 'TITLE',\n            overview: 'OVERVIEW',\n            keyPoints: 'KEY POINTS',\n            takeaways: 'MAIN TAKEAWAYS',\n            context: 'CONTEXT & IMPLICATIONS'\n        }\n    };\n    const prompts = languagePrompts[targetLanguage] || languagePrompts.en;\n    if (mode === 'podcast') {\n        return `Please provide a detailed podcast-style summary of the following content in ${targetLanguage}.\n    Structure your response as follows:\n\n    🎙️ ${prompts.title}: Create an engaging title\n\n    🎧 ${prompts.overview} (3-5 sentences):\n    - Provide a detailed context and main purpose\n\n    🔍 ${prompts.keyPoints}:\n    - Deep dive into the main arguments\n    - Include specific examples and anecdotes\n    - Highlight unique perspectives and expert opinions\n\n    📈 ${prompts.takeaways}:\n    - List 5-7 practical insights\n    - Explain their significance and potential impact\n\n    🌐 ${prompts.context}:\n    - Broader context discussion\n    - Future implications and expert predictions\n\n    Text to summarize: ${text}\n\n    Ensure the summary is comprehensive enough for someone who hasn't seen the original content.`;\n    }\n    return `Please provide a detailed summary of the following content in ${targetLanguage}.\n  Structure your response as follows:\n\n  🎯 ${prompts.title}: Create a descriptive title\n\n  📝 ${prompts.overview} (2-3 sentences):\n  - Provide a brief context and main purpose\n\n  🔑 ${prompts.keyPoints}:\n  - Extract and explain the main arguments\n  - Include specific examples\n  - Highlight unique perspectives\n\n  💡 ${prompts.takeaways}:\n  - List 3-5 practical insights\n  - Explain their significance\n\n  🔄 ${prompts.context}:\n  - Broader context discussion\n  - Future implications\n\n  Text to summarize: ${text}\n\n  Ensure the summary is comprehensive enough for someone who hasn't seen the original content.`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIveW91dHViZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxTQUFTQSxlQUFlQyxXQUFtQjtJQUNoRCxNQUFNQyxXQUFXO1FBQ2Y7UUFDQTtRQUNBO1FBQ0E7UUFDQSx3QkFBd0Msb0JBQW9CO0tBQzdEO0lBRUQsTUFBTUMsTUFBTUYsWUFBWUcsSUFBSTtJQUU1QixLQUFLLE1BQU1DLFdBQVdILFNBQVU7UUFDOUIsTUFBTUksUUFBUUgsSUFBSUcsS0FBSyxDQUFDRDtRQUN4QixJQUFJQyxPQUFPO1lBQ1QsT0FBT0EsS0FBSyxDQUFDLEVBQUU7UUFDakI7SUFDRjtJQUVBLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVPLE1BQU1DLHNCQUFzQjtJQUNqQyxXQUFXO0FBQ2IsRUFBVztBQUVKLFNBQVNDLG9CQUFvQkMsSUFBWSxFQUFFQyxjQUFzQixFQUFFQyxPQUE0QixPQUFPO0lBQzNHLE1BQU1DLGtCQUFrQjtRQUN0QixNQUFNO1lBQ0pDLE9BQU87WUFDUEMsVUFBVTtZQUNWQyxXQUFXO1lBQ1hDLFdBQVc7WUFDWEMsU0FBUztRQUNYO0lBQ0Y7SUFFQSxNQUFNQyxVQUFVTixlQUFlLENBQUNGLGVBQStDLElBQUlFLGdCQUFnQk8sRUFBRTtJQUVyRyxJQUFJUixTQUFTLFdBQVc7UUFDdEIsT0FBTyxDQUFDLDRFQUE0RSxFQUFFRCxlQUFlOzs7UUFHakcsRUFBRVEsUUFBUUwsS0FBSyxDQUFDOztPQUVqQixFQUFFSyxRQUFRSixRQUFRLENBQUM7OztPQUduQixFQUFFSSxRQUFRSCxTQUFTLENBQUM7Ozs7O09BS3BCLEVBQUVHLFFBQVFGLFNBQVMsQ0FBQzs7OztPQUlwQixFQUFFRSxRQUFRRCxPQUFPLENBQUM7Ozs7dUJBSUYsRUFBRVIsS0FBSzs7Z0dBRWtFLENBQUM7SUFDL0Y7SUFFQSxPQUFPLENBQUMsOERBQThELEVBQUVDLGVBQWU7OztLQUdwRixFQUFFUSxRQUFRTCxLQUFLLENBQUM7O0tBRWhCLEVBQUVLLFFBQVFKLFFBQVEsQ0FBQzs7O0tBR25CLEVBQUVJLFFBQVFILFNBQVMsQ0FBQzs7Ozs7S0FLcEIsRUFBRUcsUUFBUUYsU0FBUyxDQUFDOzs7O0tBSXBCLEVBQUVFLFFBQVFELE9BQU8sQ0FBQzs7OztxQkFJRixFQUFFUixLQUFLOzs4RkFFa0UsQ0FBQztBQUMvRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxhZ2d5bVxcT25lRHJpdmVcXERlc2t0b3BcXHByb2plY3RzXFx5b3V0dWJlX3N1bW1hcml6ZXJcXGxpYlxceW91dHViZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZXh0cmFjdFZpZGVvSWQoeW91dHViZV91cmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgY29uc3QgcGF0dGVybnMgPSBbXHJcbiAgICAvKD86dj18XFwvKShbMC05QS1aYS16Xy1dezExfSkuKi8sICAgICAgLy8gU3RhbmRhcmQgYW5kIHNoYXJlZCBVUkxzXHJcbiAgICAvKD86ZW1iZWRcXC8pKFswLTlBLVphLXpfLV17MTF9KS8sICAgICAgIC8vIEVtYmVkIFVSTHNcclxuICAgIC8oPzp5b3V0dVxcLmJlXFwvKShbMC05QS1aYS16Xy1dezExfSkvLCAgIC8vIFNob3J0ZW5lZCBVUkxzXHJcbiAgICAvKD86c2hvcnRzXFwvKShbMC05QS1aYS16Xy1dezExfSkvLCAgICAgIC8vIFlvdVR1YmUgU2hvcnRzXHJcbiAgICAvXihbMC05QS1aYS16Xy1dezExfSkkLyAgICAgICAgICAgICAgICAgLy8gSnVzdCB0aGUgdmlkZW8gSURcclxuICBdO1xyXG5cclxuICBjb25zdCB1cmwgPSB5b3V0dWJlX3VybC50cmltKCk7XHJcblxyXG4gIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xyXG4gICAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2gocGF0dGVybik7XHJcbiAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgcmV0dXJuIG1hdGNoWzFdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGV4dHJhY3QgdmlkZW8gSUQgZnJvbSBVUkxcIik7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBBVkFJTEFCTEVfTEFOR1VBR0VTID0ge1xyXG4gICdFbmdsaXNoJzogJ2VuJyxcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdW1tYXJ5UHJvbXB0KHRleHQ6IHN0cmluZywgdGFyZ2V0TGFuZ3VhZ2U6IHN0cmluZywgbW9kZTogJ3ZpZGVvJyB8ICdwb2RjYXN0JyA9ICd2aWRlbycpIHtcclxuICBjb25zdCBsYW5ndWFnZVByb21wdHMgPSB7XHJcbiAgICAnZW4nOiB7XHJcbiAgICAgIHRpdGxlOiAnVElUTEUnLFxyXG4gICAgICBvdmVydmlldzogJ09WRVJWSUVXJyxcclxuICAgICAga2V5UG9pbnRzOiAnS0VZIFBPSU5UUycsXHJcbiAgICAgIHRha2Vhd2F5czogJ01BSU4gVEFLRUFXQVlTJyxcclxuICAgICAgY29udGV4dDogJ0NPTlRFWFQgJiBJTVBMSUNBVElPTlMnXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHByb21wdHMgPSBsYW5ndWFnZVByb21wdHNbdGFyZ2V0TGFuZ3VhZ2UgYXMga2V5b2YgdHlwZW9mIGxhbmd1YWdlUHJvbXB0c10gfHwgbGFuZ3VhZ2VQcm9tcHRzLmVuO1xyXG5cclxuICBpZiAobW9kZSA9PT0gJ3BvZGNhc3QnKSB7XHJcbiAgICByZXR1cm4gYFBsZWFzZSBwcm92aWRlIGEgZGV0YWlsZWQgcG9kY2FzdC1zdHlsZSBzdW1tYXJ5IG9mIHRoZSBmb2xsb3dpbmcgY29udGVudCBpbiAke3RhcmdldExhbmd1YWdlfS5cclxuICAgIFN0cnVjdHVyZSB5b3VyIHJlc3BvbnNlIGFzIGZvbGxvd3M6XHJcblxyXG4gICAg8J+Ome+4jyAke3Byb21wdHMudGl0bGV9OiBDcmVhdGUgYW4gZW5nYWdpbmcgdGl0bGVcclxuXHJcbiAgICDwn46nICR7cHJvbXB0cy5vdmVydmlld30gKDMtNSBzZW50ZW5jZXMpOlxyXG4gICAgLSBQcm92aWRlIGEgZGV0YWlsZWQgY29udGV4dCBhbmQgbWFpbiBwdXJwb3NlXHJcblxyXG4gICAg8J+UjSAke3Byb21wdHMua2V5UG9pbnRzfTpcclxuICAgIC0gRGVlcCBkaXZlIGludG8gdGhlIG1haW4gYXJndW1lbnRzXHJcbiAgICAtIEluY2x1ZGUgc3BlY2lmaWMgZXhhbXBsZXMgYW5kIGFuZWNkb3Rlc1xyXG4gICAgLSBIaWdobGlnaHQgdW5pcXVlIHBlcnNwZWN0aXZlcyBhbmQgZXhwZXJ0IG9waW5pb25zXHJcblxyXG4gICAg8J+TiCAke3Byb21wdHMudGFrZWF3YXlzfTpcclxuICAgIC0gTGlzdCA1LTcgcHJhY3RpY2FsIGluc2lnaHRzXHJcbiAgICAtIEV4cGxhaW4gdGhlaXIgc2lnbmlmaWNhbmNlIGFuZCBwb3RlbnRpYWwgaW1wYWN0XHJcblxyXG4gICAg8J+MkCAke3Byb21wdHMuY29udGV4dH06XHJcbiAgICAtIEJyb2FkZXIgY29udGV4dCBkaXNjdXNzaW9uXHJcbiAgICAtIEZ1dHVyZSBpbXBsaWNhdGlvbnMgYW5kIGV4cGVydCBwcmVkaWN0aW9uc1xyXG5cclxuICAgIFRleHQgdG8gc3VtbWFyaXplOiAke3RleHR9XHJcblxyXG4gICAgRW5zdXJlIHRoZSBzdW1tYXJ5IGlzIGNvbXByZWhlbnNpdmUgZW5vdWdoIGZvciBzb21lb25lIHdobyBoYXNuJ3Qgc2VlbiB0aGUgb3JpZ2luYWwgY29udGVudC5gO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGBQbGVhc2UgcHJvdmlkZSBhIGRldGFpbGVkIHN1bW1hcnkgb2YgdGhlIGZvbGxvd2luZyBjb250ZW50IGluICR7dGFyZ2V0TGFuZ3VhZ2V9LlxyXG4gIFN0cnVjdHVyZSB5b3VyIHJlc3BvbnNlIGFzIGZvbGxvd3M6XHJcblxyXG4gIPCfjq8gJHtwcm9tcHRzLnRpdGxlfTogQ3JlYXRlIGEgZGVzY3JpcHRpdmUgdGl0bGVcclxuXHJcbiAg8J+TnSAke3Byb21wdHMub3ZlcnZpZXd9ICgyLTMgc2VudGVuY2VzKTpcclxuICAtIFByb3ZpZGUgYSBicmllZiBjb250ZXh0IGFuZCBtYWluIHB1cnBvc2VcclxuXHJcbiAg8J+UkSAke3Byb21wdHMua2V5UG9pbnRzfTpcclxuICAtIEV4dHJhY3QgYW5kIGV4cGxhaW4gdGhlIG1haW4gYXJndW1lbnRzXHJcbiAgLSBJbmNsdWRlIHNwZWNpZmljIGV4YW1wbGVzXHJcbiAgLSBIaWdobGlnaHQgdW5pcXVlIHBlcnNwZWN0aXZlc1xyXG5cclxuICDwn5KhICR7cHJvbXB0cy50YWtlYXdheXN9OlxyXG4gIC0gTGlzdCAzLTUgcHJhY3RpY2FsIGluc2lnaHRzXHJcbiAgLSBFeHBsYWluIHRoZWlyIHNpZ25pZmljYW5jZVxyXG5cclxuICDwn5SEICR7cHJvbXB0cy5jb250ZXh0fTpcclxuICAtIEJyb2FkZXIgY29udGV4dCBkaXNjdXNzaW9uXHJcbiAgLSBGdXR1cmUgaW1wbGljYXRpb25zXHJcblxyXG4gIFRleHQgdG8gc3VtbWFyaXplOiAke3RleHR9XHJcblxyXG4gIEVuc3VyZSB0aGUgc3VtbWFyeSBpcyBjb21wcmVoZW5zaXZlIGVub3VnaCBmb3Igc29tZW9uZSB3aG8gaGFzbid0IHNlZW4gdGhlIG9yaWdpbmFsIGNvbnRlbnQuYDtcclxufSJdLCJuYW1lcyI6WyJleHRyYWN0VmlkZW9JZCIsInlvdXR1YmVfdXJsIiwicGF0dGVybnMiLCJ1cmwiLCJ0cmltIiwicGF0dGVybiIsIm1hdGNoIiwiRXJyb3IiLCJBVkFJTEFCTEVfTEFOR1VBR0VTIiwiY3JlYXRlU3VtbWFyeVByb21wdCIsInRleHQiLCJ0YXJnZXRMYW5ndWFnZSIsIm1vZGUiLCJsYW5ndWFnZVByb21wdHMiLCJ0aXRsZSIsIm92ZXJ2aWV3Iiwia2V5UG9pbnRzIiwidGFrZWF3YXlzIiwiY29udGV4dCIsInByb21wdHMiLCJlbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/youtube.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/ms","vendor-chunks/openai","vendor-chunks/groq-sdk","vendor-chunks/form-data-encoder","vendor-chunks/ytdl-core","vendor-chunks/whatwg-url","vendor-chunks/m3u8stream","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/@google","vendor-chunks/youtube-transcript","vendor-chunks/webidl-conversions","vendor-chunks/sax","vendor-chunks/miniget","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsummarize%2Froute&page=%2Fapi%2Fsummarize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsummarize%2Froute.ts&appDir=C%3A%5CUsers%5Caggym%5COneDrive%5CDesktop%5Cprojects%5Cyoutube_summarizer%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Caggym%5COneDrive%5CDesktop%5Cprojects%5Cyoutube_summarizer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();